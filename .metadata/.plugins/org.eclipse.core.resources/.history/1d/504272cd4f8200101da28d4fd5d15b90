package com.skrrrrr.harudam.config;

import com.skrrrrr.harudam.jwt.JwtAuthenticationFilter;
import com.skrrrrr.harudam.jwt.JwtTokenProvider;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableWebSecurity
@RequiredArgsConstructor
public class SecurityConfig {

    private final JwtTokenProvider jwtTokenProvider;

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            // ★ CORS 활성화 (CorsConfig 빈과 연결)
            .cors(Customizer.withDefaults())
            // CSRF 비활성화 (API 서버)
            .csrf(csrf -> csrf.disable())
            // 세션 미사용
            .sessionManagement(sm -> sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            // 인가 규칙
            .authorizeHttpRequests(auth -> auth
                // ★ preflight OPTIONS 전부 허용
                .requestMatchers(HttpMethod.OPTIONS, "/**").permitAll()
                // ★ 소셜 로그인/인증 관련 공개
                .requestMatchers("/api/auth/**").permitAll()
                .requestMatchers("/api/send-verification-code", "/api/verify-code").permitAll()
                // 나머지는 인증 필요
                .anyRequest().authenticated()
            )
            // (선택) 기본 폼/베이직 끄기
            .httpBasic(b -> b.disable())
            .formLogin(f -> f.disable())
            // JWT 필터
            .addFilterBefore(new JwtAuthenticationFilter(jwtTokenProvider), UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }
}

[ai 패키지]

package com.skrrrrr.harudam.ai;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.nio.file.Path;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/ai")
public class AiController {

    private final AiConversationService conversationService;
    private final AiVoiceService voiceService;
    private final AiImageService imageService;
    private final AiDocumentService documentService;

    public AiController(AiConversationService conversationService,
                        AiVoiceService voiceService,
                        AiImageService imageService,
                        AiDocumentService documentService) {
        this.conversationService = conversationService;
        this.voiceService = voiceService;
        this.imageService = imageService;
        this.documentService = documentService;
    }

    // ---------------- 대화 ----------------
    @PostMapping("/conversation/{childId}/topic")
    public ResponseEntity<?> generateTopic(@PathVariable Long childId, @RequestBody String text) {
        return ResponseEntity.ok(Map.of("topic", conversationService.generateTopic(childId, text)));
    }

    @PostMapping("/conversation/{childId}/summary")
    public ResponseEntity<?> summarize(@PathVariable Long childId, @RequestBody String text) {
        return ResponseEntity.ok(Map.of("summary", conversationService.summarizeConversation(childId, text)));
    }

    @PostMapping("/conversation/{childId}/emotion")
    public ResponseEntity<?> analyzeEmotion(@PathVariable Long childId, @RequestBody String text) {
        return ResponseEntity.ok(Map.of("emotion", conversationService.analyzeEmotion(childId, text)));
    }

    @PostMapping("/conversation/{childId}/risk")
    public ResponseEntity<?> detectRisk(@PathVariable Long childId, @RequestBody String text) {
        return ResponseEntity.ok(Map.of("risk", conversationService.detectRisk(childId, text)));
    }

    @PostMapping("/conversation/{childId}/schedule")
    public ResponseEntity<?> extractSchedule(@PathVariable Long childId, @RequestBody String text) {
        return ResponseEntity.ok(Map.of("schedule", conversationService.extractSchedule(childId, text)));
    }

    // ---------------- 음성 ----------------
    @PostMapping("/voice/{userId}/stt")
    public ResponseEntity<?> speechToText(@PathVariable Long userId, @RequestBody Path file) {
        return ResponseEntity.ok(Map.of("text", voiceService.speechToText(file)));
    }

    @PostMapping("/voice/{userId}/tts")
    public ResponseEntity<?> textToSpeech(@PathVariable Long userId, @RequestBody String text) {
        return ResponseEntity.ok(Map.of("file", voiceService.textToSpeech(userId, text).toString()));
    }

    @PostMapping("/voice/parent/{parentId}/train")
    public ResponseEntity<?> trainParentVoice(@PathVariable Long parentId, @RequestBody Path voiceZip) {
        return ResponseEntity.ok(Map.of("model", voiceService.trainParentVoice(parentId, voiceZip).toString()));
    }

    @PostMapping("/voice/child/{childId}/train")
    public ResponseEntity<?> trainChildVoice(@PathVariable Long childId, @RequestBody Path sample) {
        return ResponseEntity.ok(Map.of("model", voiceService.trainChildVoice(childId, sample).toString()));
    }

    // ---------------- 이미지 ----------------
    @PostMapping("/image/child/{childId}/diary")
    public ResponseEntity<?> generateDiaryImage(@PathVariable Long childId, @RequestBody String prompt) {
        return ResponseEntity.ok(Map.of("file", imageService.generateDiaryImage(childId, prompt).toString()));
    }

    @PostMapping("/image/parent/{parentId}/cover")
    public ResponseEntity<?> generateAutobiographyCover(@PathVariable Long parentId, @RequestBody String prompt) {
        return ResponseEntity.ok(Map.of("file", imageService.generateAutobiographyCover(parentId, prompt).toString()));
    }

    // ---------------- 문서 ----------------
    @PostMapping("/document/parent/{parentId}/autobiography")
    public ResponseEntity<?> generateAutobiography(
            @PathVariable Long parentId,
            @RequestBody List<String> diaryEntries) {
        Path file = documentService.generateAutobiography(parentId, diaryEntries, null, null);
        return ResponseEntity.ok(Map.of("file", file.toString()));
    }
}

----
package com.skrrrrr.harudam.ai;

public interface AiConversationService {
    String generateTopic(Long childId, String conversationText); // 화두 생성
    String summarizeConversation(Long childId, String conversationText); // 대화 요약
    String analyzeEmotion(Long childId, String conversationText); // 감성 분석
    boolean detectRisk(Long childId, String conversationText); // 위험 탐지
    String extractSchedule(Long childId, String conversationText); // 일정 추출
}

---
package com.skrrrrr.harudam.ai;

import org.springframework.stereotype.Service;

@Service
public class AiConversationServiceImpl implements AiConversationService {

    @Override
    public String generateTopic(Long childId, String conversationText) {
        // TODO: GPT-5 mini 로 화두 생성
        return "sample_topic";
    }

    @Override
    public String summarizeConversation(Long childId, String conversationText) {
        // TODO: GPT-5 mini 로 대화 요약
        return "summary_text";
    }

    @Override
    public String analyzeEmotion(Long childId, String conversationText) {
        // TODO: GPT-5 mini 로 감성 분석
        return "positive";
    }

    @Override
    public boolean detectRisk(Long childId, String conversationText) {
        // TODO: GPT-5 mini 로 위험 탐지 (예: 우울증 징후)
        return false;
    }

    @Override
    public String extractSchedule(Long childId, String conversationText) {
        // TODO: GPT-5 mini 로 일정 추출
        return "2025-09-01 학교 행사";
    }
}

----
package com.skrrrrr.harudam.ai;

import java.nio.file.Path;
import java.util.List;

public interface AiDocumentService {
    Path generateAutobiography(Long parentId, List<String> diaryEntries, Path coverImage, Path parentVoiceModel);
}

----
package com.skrrrrr.harudam.ai;

import org.springframework.stereotype.Service;

import java.nio.file.Path;
import java.util.List;

@Service
public class AiDocumentServiceImpl implements AiDocumentService {

    @Override
    public Path generateAutobiography(Long parentId, List<String> diaryEntries, Path coverImage, Path parentVoiceModel) {
        // TODO: PDF 생성 로직
        // 1. diaryEntries 20개 이상 → 본문
        // 2. coverImage → 표지
        // 3. parentVoiceModel → 오디오북 생성 가능 (옵션)
        return Path.of("uploads/parent/" + parentId + "/ai_autobiography.pdf");
    }
}

---
package com.skrrrrr.harudam.ai;

import java.nio.file.Path;

public interface AiImageService {
    Path generateDiaryImage(Long childId, String prompt); // 그림 일기 메인 이미지
    Path generateAutobiographyCover(Long parentId, String prompt); // 자서전 표지 이미지
}

----
package com.skrrrrr.harudam.ai;

import org.springframework.stereotype.Service;

import java.nio.file.Path;

@Service
public class AiImageServiceImpl implements AiImageService {

    @Override
    public Path generateDiaryImage(Long childId, String prompt) {
        // TODO: GPT Image 1 API 호출
        return Path.of("uploads/child/" + childId + "/ai_diary_image.png");
    }

    @Override
    public Path generateAutobiographyCover(Long parentId, String prompt) {
        // TODO: GPT Image 1 API 호출
        return Path.of("uploads/parent/" + parentId + "/ai_autobiography_cover.png");
    }
}

----
package com.skrrrrr.harudam.ai;

import java.nio.file.Path;

public interface AiVoiceService {
    String speechToText(Path audioFile);              // STT
    Path textToSpeech(Long userId, String text);      // TTS
    Path trainParentVoice(Long parentId, Path voiceZip); // 부모 목소리 학습
    Path trainChildVoice(Long childId, Path voiceSample); // 자녀 목소리 학습
}

-----
package com.skrrrrr.harudam.ai;

import org.springframework.stereotype.Service;

import java.nio.file.Path;

@Service
public class AiVoiceServiceImpl implements AiVoiceService {

    @Override
    public String speechToText(Path audioFile) {
        // TODO: GPT-4o mini STT
        return "나는 오늘 카레를 먹었어";
    }

    @Override
    public Path textToSpeech(Long userId, String text) {
        // TODO: GPT-4o mini TTS
        return Path.of("uploads/temp_tts.mp3");
    }

    @Override
    public Path trainParentVoice(Long parentId, Path voiceZip) {
        // TODO: 부모 목소리 학습 로직
        return Path.of("uploads/parent/" + parentId + "/ai_parent_voice_model.bin");
    }

    @Override
    public Path trainChildVoice(Long childId, Path voiceSample) {
        // TODO: 자녀 목소리 학습 로직
        return Path.of("uploads/child/" + childId + "/ai_child_voice_model.bin");
    }
}
